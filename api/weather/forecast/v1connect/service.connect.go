// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: weather/forecast/service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/AndrewSC208/weather-api/api/weather/forecast/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ForecastServiceName is the fully-qualified name of the ForecastService service.
	ForecastServiceName = "weather.forecast.v1.ForecastService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ForecastServiceShortForecastProcedure is the fully-qualified name of the ForecastService's
	// ShortForecast RPC.
	ForecastServiceShortForecastProcedure = "/weather.forecast.v1.ForecastService/ShortForecast"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	forecastServiceServiceDescriptor             = v1.File_weather_forecast_service_proto.Services().ByName("ForecastService")
	forecastServiceShortForecastMethodDescriptor = forecastServiceServiceDescriptor.Methods().ByName("ShortForecast")
)

// ForecastServiceClient is a client for the weather.forecast.v1.ForecastService service.
type ForecastServiceClient interface {
	ShortForecast(context.Context, *connect.Request[v1.ShortForecastRequest]) (*connect.Response[v1.ShortForecastResponse], error)
}

// NewForecastServiceClient constructs a client for the weather.forecast.v1.ForecastService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewForecastServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ForecastServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &forecastServiceClient{
		shortForecast: connect.NewClient[v1.ShortForecastRequest, v1.ShortForecastResponse](
			httpClient,
			baseURL+ForecastServiceShortForecastProcedure,
			connect.WithSchema(forecastServiceShortForecastMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// forecastServiceClient implements ForecastServiceClient.
type forecastServiceClient struct {
	shortForecast *connect.Client[v1.ShortForecastRequest, v1.ShortForecastResponse]
}

// ShortForecast calls weather.forecast.v1.ForecastService.ShortForecast.
func (c *forecastServiceClient) ShortForecast(ctx context.Context, req *connect.Request[v1.ShortForecastRequest]) (*connect.Response[v1.ShortForecastResponse], error) {
	return c.shortForecast.CallUnary(ctx, req)
}

// ForecastServiceHandler is an implementation of the weather.forecast.v1.ForecastService service.
type ForecastServiceHandler interface {
	ShortForecast(context.Context, *connect.Request[v1.ShortForecastRequest]) (*connect.Response[v1.ShortForecastResponse], error)
}

// NewForecastServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewForecastServiceHandler(svc ForecastServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	forecastServiceShortForecastHandler := connect.NewUnaryHandler(
		ForecastServiceShortForecastProcedure,
		svc.ShortForecast,
		connect.WithSchema(forecastServiceShortForecastMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/weather.forecast.v1.ForecastService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ForecastServiceShortForecastProcedure:
			forecastServiceShortForecastHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedForecastServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedForecastServiceHandler struct{}

func (UnimplementedForecastServiceHandler) ShortForecast(context.Context, *connect.Request[v1.ShortForecastRequest]) (*connect.Response[v1.ShortForecastResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weather.forecast.v1.ForecastService.ShortForecast is not implemented"))
}
